#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>
#include <stdlib.h>
#include <sqlite3.h>

const char *creatext = "CREATE TABLE IF NOT EXISTS text"
"(id INTEGER PRIMARY KEY,"
"title TEXT NOT NULL,"
"filename TEXT NOT NULL UNIQUE);"

"CREATE TABLE IF NOT EXISTS stats"
"(text_id INTEGER PRIMARY KEY,"
"sentc_cnt INTEGER NOT NULL,"
"word_cnt INTEGER NOT NULL,"
"capital_cnt INTEGER NOT NULL,"
"alpha_cnt INTEGER NOT NULL,"
"para_cnt INTEGER NOT NULL);"

"CREATE TABLE IF NOT EXISTS ngram_uniq"
"(text_id INTEGER NOT NULL,"
"type TEXT NOT NULL,"
"n INTEGER NOT NULL,"
"cnt INTEGER NOT NULL,"
"PRIMARY KEY (text_id, type, n));"

"CREATE TABLE IF NOT EXISTS text_info"
"(text_id INTEGER PRIMARY KEY,"
"language TEXT NOT NULL,"
"year INTEGER NOT NULL,"
"format TEXT NOT NULL);"

"CREATE TABLE IF NOT EXISTS genre"
"(text_id INTEGER NOT NULL,"
"genre TEXT NOT NULL);"

"CREATE TABLE IF NOT EXISTS author"
"(text_id INTEGER NOT NULL,"
"author TEXT NOT NULL);"

"CREATE TABLE IF NOT EXISTS ngram_list"
"(id INTEGER PRIMARY KEY,"
"n INTEGER NOT NULL,"
"type TEXT NOT NULL,"
"string TEXT NOT NULL,"
"UNIQUE (string, type));"

"CREATE TABLE IF NOT EXISTS ngram_cnt"
"(ngram_id INTEGER NOT NULL,"
"text_id INTEGER NOT NULL,"
"cnt INTEGER NOT NULL,"
"PRIMARY KEY (ngram_id, text_id));"

"CREATE TABLE IF NOT EXISTS symbol"
"(char TEXT NOT NULL,"
"cnt INTEGER NOT NULL,"
"text_id INTEGER NOT NULL,"
"PRIMARY KEY (char, text_id));"

"CREATE TABLE IF NOT EXISTS punct"
"(string TEXT NOT NULL,"
"cnt INTEGER NOT NULL,"
"text_id INTEGER NOT NULL,"
"PRIMARY KEY (string, text_id));"

"CREATE TABLE IF NOT EXISTS sentc_dist"
"(len INTEGER NOT NULL,"
"cnt INTEGER NOT NULL,"
"text_id INTEGER NOT NULL,"
"PRIMARY KEY (len, text_id));";
const char *creafile = "CREATE TABLE IF NOT EXISTS files"
"(id INTEGER PRIMARY KEY,"
"filename TEXT NOT NULL UNIQUE);";
const int N = 5;
const int LENGTH = (45 * N) + N;
const int sentmax = 13955 + 1;
const int max = 5;
const int ascii = 127 + 1;
const int punctcount = 53;
const int fnlen = 255;

typedef struct
{
    //number of word, letters, sentences, paragraphs, sentence length, unique word/ngram count
    int wc;
    int lc;
    int sc;
    int pg;
    int cap;
    int sentlen[sentmax];
    int unqwc[N];
    int unqlc[N];
    int sym[ascii];
    char tag[fnlen];
    char file[fnlen];
}
stats;

typedef struct node
{
    char word[LENGTH];
    struct node *next;
    int text[max];
}
node;

const int indexcount = 150001;
node *freq[N][2][150001];
node *punct[punctcount];
stats text[max];

bool sqload(void);
bool replace(char *str, const char o, const char *n);
int analyze(char *fname, int fnum);
int alltolower(char *word);
int find(char *string, int fnum, int add);
bool gram(char *word, int fnum);
bool lgram(char c, int fnum);
unsigned long hash(const char *word);
int detstr(char *word, int *x);
bool load(char *string, int fnum, int amount);
bool unload(void);
bool getfile(char *fname, const char *exitword);

int main (int argc, char *argv[])
{
    sqlite3 *db;
    sqlite3_open("file.db", &db);
    sqlite3_exec(db, creafile, NULL, NULL, NULL);
    sqlite3_close(db);
    const char *str = "exit";
    char fname[fnlen + 1];
    printf("Type '%s' to exit. File name: ", str);
    int count = 0;
    while(getfile(fname, str))
    {
        analyze(fname, count);
        count++;
        if (count == max)
        {
            printf("Max number of files reached. Rerun program.\n");
            break;
        }
        printf("File name: ");
    }
    sqload();
    unload();
    return 0;
}

bool getfile(char *fname, const char *exitword)
{
    scanf("%255s", fname);
    if (strcmp(fname, exitword) == 0)
    {
        return false;
    }
    else
    {
        FILE *file = fopen(fname, "r");
        if (file != NULL)
        {
            fclose(file);
            return true;
        }
        else
        {
            printf("Invalid file. Max name length is %i. Try again: ", fnlen);
            return getfile(fname, exitword);
        }
    }
}

bool sqload(void)
{
    sqlite3 *db;
    sqlite3_open("file.db", &db);
    FILE *fp = fopen("insert.sql", "w");
    fprintf(fp, "PRAGMA synchronous = OFF;\n");
    fprintf(fp, "BEGIN TRANSACTION;");
    for (int count = 0; count < max && text[count].file[0] != '\0'; count++)
    {
        replace(text[count].tag, '\'', "''");
        strtok(text[count].tag, ",");
        char sql[fnlen + 50];
        sprintf(sql, "INSERT INTO files (filename)"
        "VALUES ('%s');", text[count].file);
        char *err = 0;
        int s = sqlite3_exec(db, sql, NULL, NULL, &err);
        if (s != SQLITE_OK)
        {
            printf("%s\n%s\n", sql, err);
            sqlite3_free(err);
            exit(1);
        }
        int id = sqlite3_last_insert_rowid(db);
        fprintf(fp, "INSERT INTO text (filename, title, id)"
        "VALUES ('%s','%s',%i);\n", text[count].file, text[count].tag, id);
        char *info[3];
        for (int i = 0; i < 3; i++)
        {
            info[i] = strtok(NULL, ",");
        }
        int y = strtol(info[1], NULL, 10);
        fprintf(fp, "INSERT INTO text_info (text_id, language, year, format)"
        "VALUES (%i, '%s', %i, '%s');\n", id, info[0], y, info[2]);
        char *a = strtok(NULL, ",");
        char *g = a + strlen(a) + 1;
        for (char *token = strtok(a, ";"); token != NULL; token = strtok(NULL, ";"))
        {
            fprintf(fp, "INSERT INTO author(author, text_id)"
            "VALUES ('%s', %i);\n", token, id);
        }
        for (char *token = strtok(g, ";"); token != NULL; token = strtok(NULL, ";"))
        {
            fprintf(fp, "INSERT INTO genre (genre, text_id)"
            "VALUES ('%s', %i);\n", token, id);
        }
        fprintf(fp, "INSERT INTO stats (text_id, sentc_cnt, word_cnt, capital_cnt, alpha_cnt, para_cnt)"
        "VALUES (%i, %i, %i, %i, %i, %i);\n", 
        id, text[count].sc, text[count].wc, text[count].cap, text[count].lc, text[count].pg);
        for (int i = 0; i < N; i++)
        {
            fprintf(fp, "INSERT INTO ngram_uniq (text_id, type, n, cnt)"
            "VALUES (%i, 'word', %i, %i);\n"
            "INSERT INTO ngram_uniq (text_id, type, n, cnt)"
            "VALUES (%i, 'letter', %i, %i);\n",
            id, i + 1, text[count].unqwc[i], id, i + 1, text[count].unqlc[i]);
        }
        for (int i = 0; i < ascii; i++)
        {
            if (text[count].sym[i] != 0)
            {
                char str[] = {(char)i, '\0', '\0'};
                replace(str, '\'', "''");
                fprintf(fp, "INSERT INTO symbol (text_id, char, cnt)"
                "VALUES (%i, '%s', %i);\n", id, str, text[count].sym[i]);
            }
        }
        for (int i = 0; i < punctcount; i++)
        {
            node *n = punct[i];
            while (n != NULL)
            {
                if (n->text[count] != 0)
                {
                    fprintf(fp, "INSERT INTO punct (text_id, cnt, string)"
                    "VALUES (%i, %i, '%s');\n", id, n->text[count], n->word);
                }
                n = n->next;
            }
        }
        int sentc = 0;
        for (int i = 1; sentc < text[count].sc; i++)
        {
            int tmp = text[count].sentlen[i];
            sentc += tmp;
            if (tmp != 0)
            {
                fprintf(fp, "INSERT INTO sentc_dist (text_id, len, cnt)"
                "VALUES (%i, %i, %i);\n", id, i, tmp);
            }
        }
        for (int i = 0; i < N; i++)
        {
            char *type = "word";
            for (int iter = 0; iter < 2; iter++)
            {
                for (int j = 0; j < indexcount; j++)
                {
                    node *n = freq[i][iter][j];
                    while (n != NULL)
                    {
                        if (n->text[count] != 0)
                        {
                            if (n->word[strlen(n->word) - 1] == '.')
                            {
                                n->word[strlen(n->word) - 1] = '\0';
                            }
                            fprintf(fp, "INSERT OR IGNORE INTO ngram_list (n, type, string)"
                            "VALUES (%i, '%s', '%s');\n"
                            "INSERT INTO ngram_cnt (ngram_id, text_id, cnt)"
                            "VALUES ((SELECT id FROM ngram_list WHERE string = '%s' AND type = '%s'), %i, %i);\n",
                            i + 1, type, n->word, n->word, type, id, n->text[count]);
                        }
                        n = n->next;
                    }
                }
                type = "letter";
            }
        }
    }
    sqlite3_close(db);
    fprintf(fp, "END TRANSACTION;\n");
    fclose(fp);
    return true;
}

bool replace(char *str, const char o, const char *n)
{
    for (int i = 0; i < strlen(str); i++)
    {
        if (str[i] == o)
        {
            char tmp[LENGTH];
            strcpy(tmp, &str[i + 1]);
            sprintf(&str[i], "%s%s", n, tmp);
            i += strlen(n) - 1;
        }
    }
    return true;
}

int analyze(char *fname, int fnum)
{
    FILE *file = fopen (fname, "r");
    fgets(text[fnum].tag, fnlen, file);
    strtok(text[fnum].tag, "\n");
    strcpy(text[fnum].file, fname);
    text[fnum].pg++;
    char buff[LENGTH];
    int sentc = 0;
    for (int e = fscanf(file, "%[^ \n]s", buff); e != EOF; e = fscanf(file, "%[^ \n]s", buff))
    {
        if (e == 1)
        {
            replace(buff, '\'', "''");
            text[fnum].cap += alltolower(buff);
            for (int i = 0; i < strlen(buff); i++)
            {
                if (!ispunct(buff[i]))
                {
                    if (i == strlen(buff) - 1)
                    {
                        text[fnum].wc++;
                        sentc++;
                        gram(buff, fnum);
                    }
                    if (isalpha(buff[i]))
                    {
                        lgram(buff[i], fnum);
                        text[fnum].lc++;
                    }
                    else
                    {
                        text[fnum].sym[(int)buff[i]]++;
                    }
                }
                else
                {
                    int count = 0;
                    char pun[LENGTH];
                    while(ispunct(buff[i + count]))
                    {
                        pun[count] = buff[i + count];
                        text[fnum].sym[(int)buff[i + count]]++;
                        count++;
                    }
                    pun[count] = '\0';
                    if (find(pun, fnum, 1) == 0)
                    {
                        load(pun, fnum, 1);
                    }
                    if (!strstr(pun, "--") && buff[i + count] != '\0' && i != 0)
                    {
                        i += count - 1;
                    }
                    else
                    {
                        if (i != 0)
                        {
                            buff[i] = '\0';
                            gram(buff, fnum);
                            sentc++;
                            text[fnum].wc++;
                        }
                        if (buff[i + count] == '\0')
                        {
                            if ((strstr(pun, ".") || strstr(pun, "!") || strstr(pun, "?")) && sentc > 0)
                            {
                                text[fnum].sc++;
                                text[fnum].sentlen[sentc]++;
                                sentc = 0;
                            }
                            break;
                        }
                        char *str = &buff[i + count];
                        i = -1;
                        memmove(buff, str, strlen(str) + 1);
                    }
                }
            }
        }
        fgetc(file);
        e = fscanf(file, "%[\n]s", buff);
        if (e == 1)
        {
            text[fnum].pg++;
        }
    }
    if (sentc > 0)
    {
        text[fnum].sentlen[sentc]++;
        text[fnum].sc++;
    }
    lgram('\0', fnum);
    gram(NULL, fnum);
    fclose(file);
    return 0;
}


bool gram(char *word, int fnum)
{
    static char string[LENGTH];
    static int count;
    count++;
    if(count > N)
    {
        strtok(string, " ");
        char *tmp = &string[strlen(string) + 1];
        memmove(string, tmp, strlen(tmp) + 1);
    }
    if (word != NULL)
    {
        sprintf(string + strlen(string), "%s ", word);
        if (count < N)
        {
            return true;
        }
    }
    int len = strlen(string);
    for (int i = 0; i < len; i++)
    {
        if (string[i] == ' ')
        {
            string[i] = '\0';
            char str[LENGTH];
            sprintf(str, "%s.", string);
            int f = find(str, fnum, 1);
            if (f == 0 || f == 1)
            {
                int x = 0;
                int det = detstr(str, &x);
                text[fnum].unqwc[det]++;
                if (f == 0)
                {
                    load(str, fnum, 1);
                }
            }
            string[i] = ' ';
            if (i == len - 1 && word == NULL)
            {
                char *token = strtok(string, " ");
                if (strlen(token) == len - 1)
                {
                    string[0] = '\0';
                    count = 0;
                    return true;
                }
                char *tmp = &string[strlen(token) + 1];
                memmove(string, tmp, strlen(tmp) + 1);
                i = -1;
                len = strlen(string);
            }
        }
    }
    return true;
}

bool lgram(char c, int fnum)
{
    const int length = N * 2;
    static char string[length];
    if (strlen(string) == length)
    {
        memmove(string, string + 2, strlen(string + 2) + 1);
    }
    if (c != '\0')
    {
        sprintf(string + strlen(string), "%c ", c);
        if (strlen(string) < length)
        {
            return true;
        }
    }
    int len = strlen(string);
    for (int i = 1; i < len; i+=2)
    {
        string[i] = '\0';
        int f = find(string, fnum, 1);
        if (f == 0 || f == 1)
        {
            int x = 0;
            int det = detstr(string, &x);
            text[fnum].unqlc[det]++;
            if (f == 0)
            {
                load(string, fnum, 1);
            }
        }
        string[i] = ' ';
        if (i == len - 1 && c == '\0')
        {
            memmove(string, string + 2, strlen(string + 2) + 1);
            if (string[0] == '\0')
            {
                return true;
            }
            i = -1;
            len = strlen(string);
        }
    }
    return true;
}

//djb2 hash function
unsigned long hash(const char *word)
{
    unsigned long hash = 5381;
    for (int c = 0; word[c]; c++)
    {
        hash = hash * 33 + word[c];
    }
    return hash;
}

int alltolower(char *word)
{
    int x = 0;
    for (int i = 0; i < strlen(word); i++)
    {
        if (isupper(word[i]))
        {
            x++;
            word[i] = tolower(word[i]);
        }
    }
    return x;
}

//if x is: 0 = word gram; 1 = letter gram; -1 = punct;
int detstr(char *word, int *x)
{
    if (!ispunct(word[0]))
    {
        if (word[strlen(word) - 1] != '.')
        {
            int i = strlen(word) - 1;
            if (i > 0)
            {
                i = i / 2;
            }
            *x = 1;
            return i;
        }
    }
    else
    {
        *x = -1;
        return -1;
    }
    int count = 0;
    for (int i = 0; i < strlen(word); i++)
    {
        if (word[i] == ' ')
        {
            count++;
        }
    }
    *x = 0;
    return count;
}

int find(char *word, int fnum, int add)
{
    if (word == NULL || word[0] == '\0')
    {
        return -1;
    }
    int x = 0;
    int det = detstr(word, &x);
    unsigned long index = hash(word);
    node *tmp;
    if (x != -1)
    {
        index = index % indexcount;
        tmp = freq[det][x][index];
    }
    else
    {
        index = index % punctcount;
        tmp = punct[index];
    }
    while (tmp != NULL)
    {
        if (strcmp(tmp->word, word) == 0)
        {
            tmp->text[fnum] += add;
            return tmp->text[fnum];
        }
        tmp = tmp->next;
    }
    return 0;
}

bool load (char *word, int fnum, int amount)
{
    if (word == NULL || word[0] == '\0')
    {
        return false;
    }
    int x = 0;
    int det = detstr(word, &x);
    unsigned long index = hash(word);
    node *n = calloc(1, sizeof(node));
    if (n == NULL)
    {
        return false;
    }
    strcpy(n->word, word);
    n->text[fnum] = amount;
    if (x != -1)
    {
        index = index % indexcount;
        n->next = freq[det][x][index];
        freq[det][x][index] = n;
    }
    else
    {
        index = index % punctcount;
        n->next = punct[index];
        punct[index] = n;
    }
    return true;
}

bool unload (void)
{
    for (int i = 0; i < indexcount; i++)
    {
        for (int x = 0; x < N; x++)
        {
            for (int j = 0; j < 2; j++)
            {
                node *n = freq[x][j][i];
                while ( n != NULL)
                {
                    node *tmp = n;
                    n = n->next;
                    free(tmp);
                }
            }
        }
    }
    for (int i = 0; i < punctcount; i++)
    {
        node *n = punct[i];
        while(n != NULL)
        {
            node *tmp = n;
            n = n->next;
            free(tmp);
        }
    }
    return true;
}
